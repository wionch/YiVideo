services:
  # --- Message Broker ---
  redis:
    image: "redis"
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  # --- API Gateway (The Brain) ---
  api_gateway:
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./services/api_gateway/Dockerfile
    ports:
      - "8788:80" # Map host port 8788 to container port 80
    volumes:
      - ./services:/app/services
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: always
    user: "0:0"
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      - redis

  # --- AI Worker Services ---

  ffmpeg_service:
    container_name: ffmpeg_service
    build:
      context: .
      dockerfile: ./services/workers/ffmpeg_service/Dockerfile
    volumes:
      - ./services:/app/services
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: always
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "ffmpeg_queue"]
    environment:
      - PYTHONPATH=/app
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - redis

  paddleocr_service:
    container_name: paddleocr_service
    build:
      context: .
      dockerfile: ./services/workers/paddleocr_service/Dockerfile
    volumes:
      - ./services:/app/services
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: always
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "paddleocr_queue"]
    environment:
      - PYTHONPATH=/app
      - NVIDIA_VISIBLE_DEVICES=all
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - redis

  inpainting_service:
    container_name: inpainting_service
    runtime: nvidia
    build:
      context: .
      dockerfile: ./services/workers/inpainting_service/Dockerfile
    volumes:
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: on-failure
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "inpainting_queue"]
    environment:
      - PYTHONPATH=/app
    depends_on:
      - redis

  whisperx_service:
    container_name: whisperx_service
    runtime: nvidia
    build:
      context: .
      dockerfile: ./services/workers/whisperx_service/Dockerfile
    volumes:
      - ./services:/app/services
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
      - ./models/app/cache:/app/.cache  # <--- ADDED: Hugging Face模型缓存
      - ./models/root/cache:/root/.cache  # <--- ADDED: Transformers缓存
    restart: on-failure
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "whisperx_queue"]
    environment:
      - PYTHONPATH=/app
      - HF_TOKEN=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
      - HF_HOME=/app/.cache/huggingface  # <--- ADDED: 确保使用正确的缓存路径
      - HF_ENDPOINT=https://hf-mirror.com #https://aifasthub.com # <--- ADDED: 使用镜像地址
      - HF_HUB_ENABLE_HF_TRANSFER=0  # <--- ADDED: 启用HF Transfer
      - TRANSFORMERS_CACHE=/app/.cache/transformers  # <--- ADDED: Transformers缓存路径
      - PYANNOTEAI_API_KEY=sk_39f32b6ba1584278a0c1c3582ae8db4f  # <--- ADDED: PyannoteAI API Key
    depends_on:
      - redis

  llm_service:
    container_name: llm_service
    build:
      context: .
      dockerfile: ./services/workers/llm_service/Dockerfile
    volumes:
      - ./services:/app/services
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: always
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "llm_queue"]
    environment:
      - PYTHONPATH=/app
    depends_on:
      - redis

  indextts_service:
    container_name: indextts_service
    runtime: nvidia
    build:
      context: .
      dockerfile: ./services/workers/indextts_service/Dockerfile
    volumes:
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: on-failure
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "indextts_queue"]
    environment:
      - PYTHONPATH=/app
    depends_on:
      - redis

  gptsovits_service:
    container_name: gptsovits_service
    runtime: nvidia
    build:
      context: .
      dockerfile: ./services/workers/gptsovits_service/Dockerfile
    volumes:
      - ./videos:/app/videos
      - ./locks:/app/locks
      - ./tmp:/app/tmp
      - ./share:/share  # <--- ADDED
      - ./config.yml:/app/config.yml
      - ~/.ssh:/root/.ssh
      - ~/.gemini:/root/.gemini
    restart: on-failure
    user: "0:0"
    entrypoint: ""
    command: ["celery", "-A", "app.tasks.celery_app", "worker", "-l", "info", "-Q", "gptsovits_queue"]
    environment:
      - PYTHONPATH=/app
    depends_on:
      - redis
  # --- MCP Services ---
  
  # Redis MCP Server - Redis数据库操作和状态查询
  redis_mcp_server:
    container_name: redis_mcp_server
    image: node:18-alpine
    command: >
      sh -c "
      npm install -g @modelcontextprotocol/server-redis &&
      npx @modelcontextprotocol/server-redis
      "
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
    ports:
      - "9122:9122"     # Redis MCP Server端口
    depends_on:
      - redis
    restart: unless-stopped
    volumes:
      - npm_cache:/root/.npm

  # Git MCP Server - Git仓库操作和代码审查
  git_mcp_server:
    container_name: git_mcp_server
    image: node:18-alpine
    command: >
      sh -c "
      npm install -g @modelcontextprotocol/server-git &&
      npx @modelcontextprotocol/server-git /workspaces/YiVideo
      "
    environment:
      - NODE_ENV=production
      - GIT_REPO_PATH=/workspaces/YiVideo
    ports:
      - "9123:9123"     # Git MCP Server端口
    volumes:
      - ./:/workspaces/YiVideo:ro  # 只读挂载项目目录
      - npm_cache:/root/.npm
      - ~/.ssh:/root/.ssh:ro       # SSH密钥访问（只读）
    restart: unless-stopped

  serena:
    image: ghcr.io/oraios/serena:latest
    container_name: serena
    command: >
      serena start-mcp-server
      --transport streamable-http
      --port 9121
    volumes:
      - ./:/workspaces/YiVideo
    ports:
      - "9121:9121"     # MCP HTTP 服务端点: http://localhost:9121/mcp
      - "24282:24282"   # 可选：Dashboard（若端口被占用会自增）
    restart: unless-stopped

# 添加npm缓存卷
volumes:
  npm_cache:  
  