name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        check: [lint, format, security, dependencies]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort bandit safety

    - name: Run flake8 linting
      if: matrix.check == 'lint'
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting
      if: matrix.check == 'format'
      run: |
        black --check .
        isort --check-only .

    - name: Run security checks
      if: matrix.check == 'security'
      run: |
        bandit -r . -f json -o bandit-report.json
        safety check --json --output safety-report.json

    - name: Check dependencies
      if: matrix.check == 'dependencies'
      run: |
        pip check
        safety check

    - name: Upload security reports
      if: matrix.check == 'security'
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  documentation:
    name: Documentation Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin

    - name: Build documentation
      run: |
        mkdocs build

    - name: Check documentation links
      run: |
        pip install linkchecker
        linkchecker site/

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  complexity-analysis:
    name: Complexity Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon xenon

    - name: Analyze code complexity
      run: |
        radon cc . -a -nb
        xenon . --max-average A --max-modules B --max-absolute C

    - name: Generate complexity report
      run: |
        radon cc . -f json -o complexity-report.json

    - name: Upload complexity report
      uses: actions/upload-artifact@v3
      with:
        name: complexity-report
        path: complexity-report.json

  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install performance tools
      run: |
        python -m pip install --upgrade pip
        pip install memory-profiler line-profiler

    - name: Run performance analysis
      run: |
        python -m memory_profiler scripts/profile_memory.py
        python -m kernprof -l -v scripts/profile_time.py

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-analysis
        path: |
          memory_profile.log
          time_profile.lprof