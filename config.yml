# Video2Subtitle 优化配置文件
# -----------------------------------
# 已移除无效参数，修正配置问题，保留所有实际使用的参数

# 0. 系统核心配置 (新增)
core:
  # 工作流状态记录在Redis中的过期时间（天）
  workflow_ttl_days: 7
  
  # 工作流执行完成后是否删除临时文件
  # true: 执行完后删除临时文件，节省磁盘空间（推荐）
  # false: 保留临时文件，便于调试和问题排查
  cleanup_temp_files: true

# 1. Redis 配置 (新增)
redis:
  host: 'redis' # Docker Compose中的服务名
  port: 6379
  # 用于Celery Broker
  db_broker: 0
  # 用于Celery Backend
  db_backend: 1
  # 用于分布式锁
  db_locks: 2
  # 用于工作流状态存储
  db_state_store: 3

# 2. 解码器模块配置
decoder:
  # GPU解码时，一次性送入显存的帧数。更大的值可以加快解码速度，但会增加显存占用。
  # 建议值: 16, 32, 64
  batch_size: 32

# 3. 字幕区域检测模块配置
area_detector:
  # 为了确定字幕区域，从整个视频中均匀采样的帧数。值越大，区域定位越准，但检测耗时越长。
  # 建议值: 100 ~ 500
  sample_count: 300
  # 在采样帧中，被认为是有效文本的最小字符长度。用于计算权重，避免将单个噪点字符计入范围。
  # 建议值: 2, 3
  min_text_len: 2
  # 用于并行分析视频帧以确定字幕位置的工作进程数。
  # 默认值: min(CPU核心数, 4)
  num_workers: 4
  # 检测到的字幕区域上下各扩展的像素数，用于确保完整捕获字幕内容。
  # 建议值: 5-10 (精确字幕), 10-15 (一般场景), 15-30 (有特效字幕)
  y_padding: 10

# 4. 关键帧检测模块配置
keyframe_detector:
  # 感知哈希(dHash)的大小。更高的值可以更精确地捕捉图像内容的细节，但也可能对微小噪点更敏感。
  # 推荐值: 8, 16
  dhash_size: 8
  # 相似度阈值。两帧间相似度低于此值则认为是新的关键帧。
  # - 90% (0.90): 严格模式，只有显著差异才触发新关键帧
  # - 85% (0.85): 平衡模式，适合大多数场景
  # - 80% (0.80): 宽松模式，对细微变化也敏感
  # 建议值: 0.98 (修复重复字幕问题)
  similarity_threshold: 0.98
  
  # dHash区域优化配置 (聚焦字幕中心，减少背景干扰)
  # dHash焦点区域宽度计算公式: 字幕高度 × dhash_focus_ratio
  # - 2.0: 较窄焦点，最小背景干扰
  # - 3.0: 平衡焦点，推荐值  
  # - 4.0: 较宽焦点，适合字体较大的字幕
  dhash_focus_ratio: 3.0
  # 最小焦点宽度保护，防止极小字幕导致焦点区域过窄
  # 建议值: 150-300像素
  min_focus_width: 200

# 5. OCR识别模块配置
ocr:
  # OCR语言设置
  lang: 'en' # 英文en 中文ch
  # 并行处理的工作进程数
  num_workers: 4
  
  # PaddleOCR 3.x 核心参数配置 (基于测试结果优化)
  paddleocr_config:
    # 模型版本选择 - PP-OCRv5是最新最准确的版本
    ocr_version: 'PP-OCRv5'
    
    # 文本检测参数 (针对字幕条优化)
    text_det_limit_side_len: 736         # 检测模型输入边长限制 (修正为代码默认值)
    text_det_thresh: 0.30               # 文本检测像素阈值
    text_det_box_thresh: 0.60           # 文本检测框阈值 
    text_det_unclip_ratio: 1.50         # 文本检测扩张系数
    text_det_input_shape: null          # 检测模型输入形状，null使用默认
    
    # 文本识别参数
    text_recognition_batch_size: 8      # 识别批处理大小
    text_rec_score_thresh: 0            # 文本识别阈值
    text_rec_input_shape: null          # 识别模型输入形状，null使用默认
    
    # 方向分类参数 (字幕场景优化：全部关闭以提高速度)
    use_doc_orientation_classify: false    # 关闭文档图像方向分类
    use_doc_unwarping: false              # 关闭文档扭曲矫正
    use_textline_orientation: false       # 关闭文本行方向分类
    textline_orientation_batch_size: 6    # 方向分类批处理大小
    
    # 其他优化参数
    return_word_box: false          # 是否返回单词级别的边界框
    precision: "fp32"              # 推理精度：fp32(精度高) 或 fp16(速度快)
    use_tensorrt: false            # 是否启用TensorRT加速
  
  # 模型配置 - 用于字幕场景的最佳模型选择
  models:
    # 文本检测模型
    detection_model: "PP-OCRv5_server_det"
    
    # 文本识别模型配置 - 按语言优化选择
    recognition_models:
      zh: "PP-OCRv5_server_rec"           # 中文简体
      chinese_cht: "PP-OCRv5_server_rec"  # 中文繁体
      en: "en_PP-OCRv5_mobile_rec"        # 英文专用 (轻量高效)
      ja: "PP-OCRv5_server_rec"           # 日文
      korean: "korean_PP-OCRv5_mobile_rec" # 韩文
      fr: "latin_PP-OCRv5_mobile_rec"     # 法语
      de: "latin_PP-OCRv5_mobile_rec"     # 德语
      es: "latin_PP-OCRv5_mobile_rec"     # 西班牙语
      it: "latin_PP-OCRv5_mobile_rec"     # 意大利语
      pt: "latin_PP-OCRv5_mobile_rec"     # 葡萄牙语
      ru: "eslav_PP-OCRv5_mobile_rec"     # 俄语
      th: "th_PP-OCRv5_mobile_rec"        # 泰语
      ar: "ar_PP-OCRv5_mobile_rec"        # 阿拉伯语
      default: "PP-OCRv5_server_rec"      # 默认回退模型
    
    # 字幕场景优化设置
    subtitle_optimized: true

# 6. 后处理器模块配置
postprocessor:
  # 一条字幕被认为是有效的最小持续时间（单位：秒）。用于过滤掉因检测错误而产生的快速闪现的无效字幕。
  # 建议值: 0.1 ~ 0.5
  min_duration_seconds: 0.2

# 7. 流水线控制
pipeline:
  # true: 只处理内容变化的关键帧 (推荐，性能更好)。
  # false: 处理视频的每一帧。速度极慢，但能捕捉所有微小变化。
  detect_keyframes: false
  
  # true: 将多个字幕条拼接成一张大图进行OCR (推荐，提高效率)。
  # false: 对每个字幕条独立进行OCR。
  use_image_concat: true
  
  # 当 use_image_concat=true 时，每多少个字幕条合并成一张图片。
  concat_batch_size: 10

  # [新增] 字幕条拼接任务的并发进程数
  stitching_workers: 10
  
  # 帧缓存策略。
  # "memory": 帧图像缓存在内存中。速度快，内存占用高。
  # "pic": 帧图像保存为临时图片文件。内存占用低，磁盘I/O开销大。
  frame_cache_strategy: "pic"

# 8. LLM 服务配置
llm_service:
  # 如果工作流中未指定，则使用此默认提供商
  default_provider: gemini
  # 各个大模型提供商的配置
  providers:
    gemini:
      # 在此处填入你的Gemini API Key
      api_key: ""
      # Gemini Pro 模型的API Endpoint
      api_base_url: "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"
    deepseek:
      # 在此处填入你的DeepSeek API Key
      api_key: ""
      # DeepSeek 模型的API Endpoint
      api_base_url: "https://api.deepseek.com/chat/completions"

# 9. WhisperX 服务配置 (新增)
whisperx_service:
  # WhisperX ASR 模型设置
  # 可选: large-v1, large-v2, large-v3, medium, small, base, tiny
  model_name: "large-v2"
  # ASR 语言代码。如果设置为null，将自动检测。
  language: "zh"
  # 推理设备: "cuda" 或 "cpu"
  device: "cuda"
  # 推理精度: "float16", "float32", "int8"
  compute_type: "float16"
  # 转录时的批处理大小，根据显存调整
  batch_size: 4

# 10. GPU锁配置 (新增)
# 用于优化GPU资源的并发访问控制，提升系统吞吐量
gpu_lock:
  # 初始轮询间隔（秒）
  poll_interval: 2
  # 最大等待时间（秒）
  max_wait_time: 1800
  # 锁超时时间（秒）- 防止任务崩溃导致死锁
  lock_timeout: 3600
  # 启用指数退避 - 动态调整轮询间隔，避免固定间隔的 thundering herd 问题
  exponential_backoff: true
  # 最大轮询间隔（秒）- 指数退避的上限
  max_poll_interval: 10

# 11. GPU锁监控配置 (新增)
# 用于主动监控GPU锁状态，自动检测和恢复死锁
gpu_lock_monitor:
  # 监控间隔（秒）
  monitor_interval: 30

  # 分级超时配置
  timeout_levels:
    warning: 1800      # 30分钟 - 记录警告日志
    soft_timeout: 3600  # 60分钟 - 尝试优雅终止
    hard_timeout: 7200  # 120分钟 - 强制释放锁

  # 心跳配置
  heartbeat:
    interval: 60       # 任务心跳间隔
    timeout: 300       # 心跳超时时间

  # 清理配置
  cleanup:
    max_retry: 3       # 最大重试次数
    retry_delay: 60    # 重试间隔

  # 监控开关
  enabled: true       # 是否启用监控功能
  auto_recovery: true # 是否启用自动恢复

  # 健康检查阈值
  health_thresholds:
    min_success_rate: 0.8     # 最小成功率
    max_timeout_rate: 0.2     # 最大超时率
    max_lock_age: 3600        # 最大锁持有时间
    recent_window_size: 20    # 最近统计窗口大小
